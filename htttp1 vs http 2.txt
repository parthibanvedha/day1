blog for http1.1 vs htpp 2:


introduction:
  * The Hypertext Transfer Protocol, or HTTP, is an application protocol that has been the de facto standard for 
   communication on the World Wide Web since its invention in 1989. 
  * From the release of HTTP/1.1 in 1997 until recently, there have been few revisions to the protocol.
  * But in 2015, a reimagined version called HTTP/2 came into use, which offered several methods to decrease latency,
   especially when dealing with mobile platforms and server-intensive graphics and videos.
  * HTTP/2 has since become increasingly popular, with some estimates suggesting that around a third of all websites in the world support it. 
  * In this changing landscape, web developers can benefit from understanding the technical differences between HTTP/1.1 
  and HTTP/2, allowing them to make informed and efficient decisions about evolving best practices.

  HTTP1.1:
  Developed by Timothy Berners-Lee in 1989 as a communication standard for the World Wide Web, HTTP is a top-level application protocol 
  that exchanges information between a client computer and a local or remote web server. In this process, a client sends a text-based request 
  to a server by calling a method like GET or POST. In response, the server sends a resource like an HTML page back to the client.

For example, let’s say you are visiting a website at the domain www.example.com. When you navigate to this URL, the web browser on your 
computer sends an HTTP request in the form of a text-based message, similar to the one shown here:

      GET /index.html HTTP/1.1
      Host: www.example.com

      This request uses the GET method, which asks for data from the host server listed after Host:.
    In response to this request, the example.com web server returns an HTML page to the requesting 
    client, in addition to any images, stylesheets, or other resources called for in the HTML. Note
    that not all of the resources are returned to the client in the first call for data. The requests
    and responses will go back and forth between the server and client until the web browser has received 
    all the resources necessary to render the contents of the HTML page on your screen.

  HTTP2:
  One of the themes that has come up again and again in HTTP/2 is its ability to use the binary framing
   layer to exhibit greater control over finer detail. The same is true when it comes to header compression. 
   HTTP/2 can split headers from their data, resulting in a header frame and a data frame. The HTTP/2-specific 
   compression program HPACK can then compress this header frame. This algorithm can encode the header metadata    using Huffman coding, thereby greatly decreasing its size. Additionally, HPACK can keep track of previously
   conveyed metadata fields and further compress them according to a dynamically altered index shared between
   the client and the server. 
  For example, take the following two requests:



REQUEST 1:
 method:		GET
scheme:		 https
host:		 example.com
path:		 /academy
accept:		 /image/jpeg
user-agent:	 Mozilla/5.0 ...

REQUEST 2:
method:		GET
scheme:		https
host:		example.com
path:		/academy/images
accept:		/image/jpeg
user-agent:	Mozilla/5.0 ...


conclusion:
As you can see from this point-by-point analysis, HTTP/2 differs from HTTP/1.1 in many ways,
with some features providing greater levels of control that can be used to better optimize web
application performance and other features simply improving upon the previous protocol. Now that
you have gained a high-level perspective on the variations between the two protocols, you can consider
how such factors as multiplexing, stream prioritization, flow control, server push, and compression in 
HTTP/2 will affect the changing landscape of web development.

If you would like to see a performance comparison between HTTP/1.1 and HTTP/2, check out this Google demo
 that compares the protocols for different latencies. Note that when you run the test on your computer, page 
 load times may vary depending on several factors such as bandwidth, client and server resources available at
the time of testing, and so on. If you’d like to study the results of more exhaustive testing, take a look
at the article HTTP/2 – A Real-World Performance Test and Analysis. Finally, if you would like to explore 
how to build a modern web application, you could follow our How To Build a Modern Web Application to Manage
Customer Information with Django and React on Ubuntu 18.04 tutorial, or set up your own HTTP/2 server with 
our How To Set Up Nginx with HTTP/2 Support on Ubuntu 20.04 tutorial.